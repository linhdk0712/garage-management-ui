@startuml Vehicle Management Flow
skin rose 
skinparam actorStyle awesome
skinparam roundcorner 10
skinparam shadowing false

' Actors and Participants
actor Customer
participant "VehiclesPage" as ListPage
participant "VehicleForm" as Form
participant "API Client" as API
participant "Backend Server" as Server
database "LocalStorage" as Storage

' === List Vehicles Flow ===
group List Vehicles
    Customer -> ListPage: Access vehicles page
    activate ListPage
    
    ListPage -> API: fetchCustomerVehicles()
    activate API
    API -> Server: GET /api/vehicles
    Server --> API: Return vehicles list
    API --> ListPage: Return vehicles data
    deactivate API
    
    ListPage --> Customer: Display vehicles table
    deactivate ListPage
end

' === Add New Vehicle Flow ===
group Add New Vehicle
    Customer -> ListPage: Click "Add Vehicle"
    ListPage -> Form: Open form (mode: "add")
    activate Form
    
    Customer -> Form: Fill vehicle details
    Note right of Form
        Required fields:
        - Make
        - Model
        - Year
        - License Plate
        - Mileage
    end note
    
    Customer -> Form: Click "Add Vehicle"
    Form -> API: addVehicle(vehicleData)
    activate API
    API -> Server: POST /api/vehicles
    Server --> API: Return new vehicle
    API --> Form: Return success
    deactivate API
    
    Form --> ListPage: Close form
    deactivate Form
    
    ListPage -> API: fetchCustomerVehicles()
    activate API
    API -> Server: GET /api/vehicles
    Server --> API: Return updated list
    API --> ListPage: Update vehicles table
    deactivate API
    
    ListPage --> Customer: Show updated list
end

' === Edit Vehicle Flow ===
group Edit Vehicle
    Customer -> ListPage: Click edit icon
    ListPage -> Form: Open form (mode: "edit")
    activate Form
    
    Form -> API: fetchVehicleDetails(vehicleId)
    activate API
    API -> Server: GET /api/vehicles/{id}
    Server --> API: Return vehicle details
    API --> Form: Populate form
    deactivate API
    
    Customer -> Form: Update vehicle details
    Customer -> Form: Click "Update Vehicle"
    Form -> API: updateVehicle(vehicleId, data)
    activate API
    API -> Server: PUT /api/vehicles/{id}
    Server --> API: Return updated vehicle
    API --> Form: Return success
    deactivate API
    
    Form --> ListPage: Close form
    deactivate Form
    
    ListPage -> API: fetchCustomerVehicles()
    activate API
    API -> Server: GET /api/vehicles
    Server --> API: Return updated list
    API --> ListPage: Update vehicles table
    deactivate API
    
    ListPage --> Customer: Show updated list
end

' === Error Handling ===
group Error Scenarios
    alt Invalid Data
        Form -> API: addVehicle(invalidData)
        API --> Form: Return validation error
        Form --> Customer: Show error message
    end
    
    alt Network Error
        Form -> API: addVehicle(data)
        API --> Form: Return network error
        Form --> Customer: Show error message
    end
end

@enduml 